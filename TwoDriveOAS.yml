openapi: 3.0.1
info:
  title: TwoDrive API
  version: '1'
  
security:
  - bearerAuth: []

paths:
  /api/files:
    get:
      tags:
        - File
      summary: 'Returns all files in the system, can be filtered.'
      description: 'Can take fileName which brings only files that include the parameter. Can take sortOrder, which can be one of these: {name_asc, name_desc, created_asc, created_desc, modified_asc, modified_desc}. Only administrators allowed.'
      parameters:
        - name: fileName
          in: query
          schema:
            type: string
        - name: sortOrder
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - File
      summary: 'Adds a new file to the system.'
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/File'
          application/json:
            schema:
              $ref: '#/components/schemas/File'
          text/json:
            schema:
              $ref: '#/components/schemas/File'
          application/*+json:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/api/files':
    get:
      tags:
        - File
      summary: 'Returns the 10 users with the most files'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/api/files/shared':
    get:
      tags:
        - File
      summary: 'Returns all files in the system that are shared with the authenticated user.'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/api/files/{id}':
    get:
      tags:
        - File
      operationId: GetFile
      summary: 'Gets the file with the id in the URL. File owner, file readers and administrators can access it.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Entity not found in system
  '/api/files/view':
    get:
      tags:
        - File
      summary: 'Returns all owned files owned by the authenticated user in the system, can be filtered'
      description: 'Can take fileName which brings only files that include the parameter. Can take sortOrder, which can be one of these: {name_asc, name_desc, created_asc, created_desc, modified_asc, modified_desc}.'
      parameters:
        - name: fileName
          in: query
          schema:
            type: string
        - name: sortOrder
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/api/files/{fileId}/users/{idUsers}':
    post:
      tags:
        - File
      summary: 'Adds user as a reader on file.'
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: idUsers
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User or File not found
  '/api/files/{fileId}':
    put:
      tags:
        - File
      summary: 'Updates file'
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/File'
          application/json:
            schema:
              $ref: '#/components/schemas/File'
          text/json:
            schema:
              $ref: '#/components/schemas/File'
          application/*+json:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: File not found
    delete:
      tags:
        - File
      summary: 'Deletes file'
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: File not found
  '/api/files/{fileId}/folder/{idFolder}':
    put:
      tags:
        - File
      summary: 'Moves file into folder'
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: idFolder
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found (File or Folder)
  '/api/files/{fileId}/users/{idReader}':
    delete:
      tags:
        - File
      summary: 'Removes reader from file'
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: idReader
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found (file or user)
  /api/folders:
    get:
      tags:
        - Folder
      summary: 'Gets all folders in the system'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Folder
      summary: 'Creates a folder'
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Folder'
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
          text/json:
            schema:
              $ref: '#/components/schemas/Folder'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Folder'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    '/api/folder/all':
    get:
      tags:
        - Folder
      summary: 'Returns all folders in the system.'
      description: 'Can only be accessed by an administrator'
      operationId: GetAllFolders
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    '/api/folders/{folderId}':
    get:
      tags:
        - Folder
      summary: 'Returns a certain folder in the system'
      description: 'Can be accessed by the owner, a reader or the administrator'
      operationId: GetFolder
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: 'Folder not found'
    put:
      tags:
        - Folder
      summary: 'Updates the given folder'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Folder'
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
          text/json:
            schema:
              $ref: '#/components/schemas/Folder'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Folder'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Folder not found
    delete:
      tags:
        - Folder
      summary: 'Deletes the given folder'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Folder not found
  '/api/folders/{folderId}/users/{idUsers}':
    post:
      tags:
        - Folder
      summary: 'Adds given user as reader to given folder'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: idUsers
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Folder or user not found
  '/api/folders/{folderId}/folder/{idFolder}':
    put:
      tags:
        - Folder
      summary: 'Moves first given folder into second given folder'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: idFolder
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Either folder not found
  '/api/folders/{folderId}/users/{idReader}':
    delete:
      tags:
        - Folder
      summary: 'Removes reader from folder'
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: idReader
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Folder or user not found
  /api/users/authenticate:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/json:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
        '400':
          description: Invalid credentials
  /api/users:
    get:
      summary: 'Gets a list of all users'
      tags:
        - User
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: 'Creates a new user'
      tags:
        - User
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/json:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/api/users/{id}':
    get:
      summary: 'Gets the given user'
      tags:
        - User
      operationId: GetUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    put:
      summary: 'Updates the given user'
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/json:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    delete:
      summary: 'Deletes the given user'
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  '/api/users/{idUser}':
    post:
      summary: 'Adds given user to authenticated user friendList'
      tags:
        - User
      parameters:
        - name: idUser
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    delete:
      summary: 'Removes given user from authenticated user friendList'
      tags:
        - User
      parameters:
        - name: idUser
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  "/api/users/friends": {
      "get": {
        "summary": "Gets authenticated user's friends",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  "/api/migration/{type}": {
      "post": {
        "tags": [
          "Migration"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          nullable: false
        lastName:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        role:
          type: string
          nullable: false
        token:
          type: string
          nullable: true
        friendList:
          type: array
          items:
            $ref: '#/components/schemas/User'
          nullable: false
        rootFolder:
          $ref: '#/components/schemas/Folder'
      additionalProperties: false
    Folder:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
          nullable: false
        folders:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
          nullable: false
        id:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        name:
          type: string
          nullable: false
        parent:
          $ref: '#/components/schemas/Folder'
        readers:
          type: array
          items:
            $ref: '#/components/schemas/User'
          nullable: true
      additionalProperties: false
    File:
      type: object
      properties:
        content:
          type: string
          nullable: false
        creationDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        name:
          type: string
          nullable: false
        parent:
          $ref: '#/components/schemas/Folder'
        readers:
          type: array
          items:
            $ref: '#/components/schemas/User'
          nullable: false
      additionalProperties: false