// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwoDrive.DataAccess.Interface;

namespace TwoDrive.WebApi.Migrations
{
    [DbContext(typeof(TwoDriveContext))]
    [Migration("20190914133203_TwoDrive.RefactoredDomain")]
    partial class TwoDriveRefactoredDomain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TwoDrive.Domain.FolderElement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentId");

                    b.ToTable("FolderElement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FolderElement");
                });

            modelBuilder.Entity("TwoDrive.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Administrator");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<long?>("FolderElementId");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<long?>("UserId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("FolderElementId");

                    b.HasIndex("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TwoDrive.Domain.File", b =>
                {
                    b.HasBaseType("TwoDrive.Domain.FolderElement");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long?>("FolderId");

                    b.Property<DateTime>("LastModifiedDate");

                    b.HasIndex("FolderId");

                    b.HasDiscriminator().HasValue("File");
                });

            modelBuilder.Entity("TwoDrive.Domain.Folder", b =>
                {
                    b.HasBaseType("TwoDrive.Domain.FolderElement");

                    b.Property<long?>("FolderId")
                        .HasColumnName("FolderId1");

                    b.HasIndex("FolderId");

                    b.HasDiscriminator().HasValue("Folder");
                });

            modelBuilder.Entity("TwoDrive.Domain.FolderElement", b =>
                {
                    b.HasOne("TwoDrive.Domain.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("TwoDrive.Domain.FolderElement", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("TwoDrive.Domain.User", b =>
                {
                    b.HasOne("TwoDrive.Domain.FolderElement")
                        .WithMany("Readers")
                        .HasForeignKey("FolderElementId");

                    b.HasOne("TwoDrive.Domain.User")
                        .WithMany("FriendList")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TwoDrive.Domain.File", b =>
                {
                    b.HasOne("TwoDrive.Domain.Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId");
                });

            modelBuilder.Entity("TwoDrive.Domain.Folder", b =>
                {
                    b.HasOne("TwoDrive.Domain.Folder")
                        .WithMany("Folders")
                        .HasForeignKey("FolderId");
                });
#pragma warning restore 612, 618
        }
    }
}
